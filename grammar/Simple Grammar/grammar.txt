translation-unit -> OPT:newline OPT:preprocessing-begin declaration-seq OPT:preprocessing-end |
preprocessing-line -> # include \  < libname \> newline |
preprocessing-line -> # include \  " filename " newline |
preprocessing-line -> # ifndef \  variable newline |
preprocessing-line -> # define \  variable newline |
preprocessing-end-line -> # endif newline |
preprocessing-end -> OPT:preprocessing-end preprocessing-end-line |
preprocessing-begin -> OPT:preprocessing-begin preprocessing-line |
libname -> location-identifier |
filename -> location-identifier |
location-identifier -> OPT:location-identifier character | OPT:location-identifier location-specific-char |
location-specific-char -> . | / |
declaration-seq -> declaration | declaration-seq declaration |
declaration -> block-declaration | function-definition | namespace-definition | function-call \  ; | return-value | selection-statement | stream-statements | assignment-line ; OPT:newline | class-declaration | pp-statements |
pp-statements -> public : newline declaration-seq | private : newline declaration-seq |
% something weird happend when naming this public-private-statements
class-declaration -> c l a s s \  class-type \  { OPT:newline declaration-seq } OPT:; OPT:newline |
% Weird errors when class not written as c l a s s
%class-declaration ->
assignment-line -> variable assignment | variable ++ | variable -- | variable \  +=  expression | variable \  +=  expression | variable \  -=  expression | variable \  /=  expression |
stream-statements -> stream-statement \  << \  additive-expression ; newline | stream-statement \  >> \  additive-expression ; newline |
stream-statement -> stream-statement \  << \  additive-expression | stream-statement \  >> \  additive-expression | additive-expression |
stream-out -> expression \  | stream-out >> \  expression |
stream-in -> expression \  | stream-in << \  expression |
selection-statement -> if \  ( expression ) \  { newline declaration-seq } OPT:else-if-statements OPT:else-statement newline |
else-if-statements -> OPT:else-if-statements else-if-statement |
else-if-statement -> \  else \  eif \  ( expression ) \  { newline declaration-seq } |
else-statement -> \  else \  { newline declaration-seq } |
function-call -> function-name ( OPT:parameters ) |
block-declaration -> simple-declaration | function-declaration |
function-declaration -> class-type \  function-name ( OPT:parameters ) ; OPT:newline |
simple-declaration -> class-type \  variable OPT:assignment ; OPT:newline |
assignment -> \  = \  expression |
expression -> equality-expression |
equality-expression -> relational-expression | equality-expression \  == \  relational-expression |
relational-expression -> brackets-expression | expression \  < \  expression | expression \  \> \  expression | expression \  <= \  expression | expression \  >= \  expression |
additive-expression -> expression-variable | expression \  + \  expression | expression \  - \  expression |
multiplicative-expression -> additive-expression | expression \  * \  expression | expression \  / \  expression | expression \  % \  expression |
brackets-expression -> ( expression ) | multiplicative-expression |
expression-variable -> variable | literal | function-call |
%identifier | literal
% class-type used as alias for decl-specifier-seq
% variable used instead of init-declarator-list
class-type -> OPT:namespace identifier |
variable -> OPT:namespace identifier |
namespace -> identifier :: |
namespace-name -> identifier |
identifier -> OPT:identifier non-digit |
non-digit -> a | b | c | d | e | f | g | h | i | j | k | l | m | n | o | p | q | r | s | t | u | v | w | x | y | z | A | B | C | D | E | F | G | H | I | J | K | L | M | N | O | P | Q | R | S | T | U | V | W | X | Y | Z | _ |
newline -> OPT:newline newline-element |
newline-element -> \\n | \  | comment-block |
comment-block -> / / OPT:string \\n |
function-definition -> class-type \  function-name ( OPT:parameters ) \  { OPT:newline declaration-seq } OPT:newline |
return-value -> return OPT:return-expr ; OPT:newline |
return-expr -> \  expression |
function-name -> OPT:namespace identifier |
parameters -> parameter | parameter , \  parameter |
parameter -> class-type \  variable | expression | variable |
literal -> number | char-literal | string-literal |
string-literal -> " string " |
string -> OPT:string string-character |
string-character -> character | special-character |
special-character -> \  | , | ! | ? | ; | - | ) | ( | = | * | - | + | : | ' | # | . |
% . | ! | ? | * | @ | # | % | ^ | & | ( | ) | [ | { | } | ] | ' | / | , | < | > |
number -> OPT:number digit |
digit -> 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 |
char-literal -> ' character ' |
character -> digit | non-digit |
% using parameters ad parameter-declaration-claus